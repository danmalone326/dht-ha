#!.venv/bin/python
import Adafruit_DHT
import math
import os
import time
from datetime import datetime
import json
import socket
import paho.mqtt.client as paho
import configparser
import sys

debug = True
def debugPrint(o):
    if debug:
        print(o)


configFileName = os.path.basename(__file__) + ".ini"

# default values
hostname = socket.gethostname()
defaultDeviceID = hostname + "-dht"
defaultDeviceModel = "HomeAssistant Discovery for DHT11/22 on RPi"
defaultDeviceManufacturer = "Dan"
defaultDeviceName = hostname + " RPi DHT"

defaultSensorIDPrefix = hostname
defaultSensorNamePrefix = hostname
defaultSensorReadInterval = 5
defaultSensorPublishInterval = 60

def configError(errorStr):
    print(f"Config error: {errorStr}", file=sys.stderr)
    exit(1)

def readConfig():
    config = configparser.ConfigParser()
    config.read(configFileName)

    if "mqtt" not in config.sections():
        configError("Missing mqtt section.")
        
    mqtt = {}
    mqtt["hostname"] = config.get("mqtt","hostname",fallback = None)
    mqtt["username"] = config.get("mqtt","username",fallback = None)
    mqtt["password"] = config.get("mqtt","password",fallback = None)

    if (mqtt["hostname"] is None):
        configError("Missing mqtt hostname.")
    elif (mqtt["username"] is None):
        configError("Missing mqtt username.")
    elif (mqtt["password"] is None):
        configError("Missing mqtt password.")

    device = {}    
    device["id"] = config.get("device","id",fallback = defaultDeviceID)
    device["model"] = defaultDeviceModel
    device["manufacturer"] = defaultDeviceManufacturer
    device["name"] = config.get("device","name",fallback = defaultDeviceName) 

    sensors = []
    for section in config.sections():
        if (section.startswith("sensor-")):
            thisSection = config[section]
            thisSensor = {}
            thisSensor["type"] = thisSection.get("type")
            thisSensor["pin"] = thisSection.get("pin")
            if (thisSensor["type"] is None or thisSensor["pin"] is None):
                configError(f'{section} missing required type and/or pin')

            thisSensor["id"] = thisSection.get("id", section)
            thisSensor["readInterval"] = int(thisSection.get("readInterval",defaultSensorReadInterval))
            thisSensor["publishInterval"] = int(thisSection.get("publishInterval",defaultSensorPublishInterval))
            thisSensor["name"] = thisSection.get("name",defaultSensorNamePrefix + " " + section)
            sensors.append(thisSensor)
    

    return (mqtt, device, sensors)

(mqtt, device, sensors) = readConfig()

mqtt["client"] = None
mqtt["clientID"] = device["id"]
mqtt["connected"] = False

device["haConfig"] = {
        "identifiers":[
            device["id"]
        ],
        "name": device["name"],
        "model": device["model"],
        "manufacturer": device["manufacturer"]
    }

topicPrefix = hostname+"/dht"
availabilityTopic = topicPrefix + "/availability"
valuesTopicPrefix = topicPrefix + "/values"
haTopicPrefix = "homeassistant/sensor"
deviceAvailableValue = "Online"
deviceNotAvailableValue = "Offline"


# callbacks
def onConnect(client, userdata, flags, rc):
    global mqtt
    global sensors

    debugPrint("onConnect")
    publishAvailability(availability=deviceAvailableValue)
    
    # 
    for sensor in sensors:
        publishSensorHaConfig(sensor)

    mqtt["connected"] = True

def onDisconnect(client, userdata, rc):
    mqtt["connected"] = False

def onPublish(client, userdata, mid):
    debugPrint("onPublish")

# setup and connect to mqtt service
def connect():
    global mqtt

    mqtt["client"] = paho.Client(mqtt["clientID"])
    # set callbacks
    mqtt["client"].on_connect = onConnect
    mqtt["client"].on_disconnect = onDisconnect
    mqtt["client"].on_publish = onPublish

    # set last will and testament
    mqtt["client"].will_set(topic=availabilityTopic, payload=deviceNotAvailableValue, retain=True)

    mqtt["client"].reconnect_delay_set()

    mqtt["client"].username_pw_set(username=mqtt["username"], password=mqtt["password"])
    mqtt["client"].connect(host=mqtt["hostname"])

    # starts a new thread, calls the loop method at regular intervals, handles re-connects automatically
    mqtt["client"].loop_start()

# publish a message
def publish (topic, payload=None, qos=0, retain=False):
    global mqtt

    if (type(payload) is dict):
        convertedPayload = json.dumps(payload)
    else:
        convertedPayload = payload

    debugPrint(topic)
    if (qos != 0):
        debugPrint("qos: %d" % qos)
    if (retain):
        debugPrint("retain: True")
    if(payload):
        debugPrint(convertedPayload)
    else:
        debugPrint('---DELETE---')

    if not debug:
        result = mqtt["client"].publish(topic=topic, payload=convertedPayload, qos=qos, retain=retain)

# Home Assistant discovery config for sensor
# {
#     "unique_id": "hostname-dht-Humidity",
#     "name": "Friendly Name Humidity",
#     "state_topic": "hostname/dht/sensor",
#     "availability_topic": "hostname/dht/availability",
#     "payload_available": "Online",
#     "payload_not_available": "Offline",
#     "force_update": true,
#     "value_template": "{{value_json['Analog']['Humidity']}}",
#     "device": {
#         "identifiers": [
#             "hostname-dht"
#         ],
#         "name": "Friendly Name RPi DHT22",
#         "model": "HomeAssistant Discovery for DHT22 on RPi",
#         "manufacturer": "Dan"
#     },
#     "device_class": "humidity",
#     "unit_of_measurement": "%"
# }

def publishLogicalSensorHaConfig(sensor,logicalSensorName,sensorClass,sensorUnit):
    global device

    uniqueID = device["id"] + "-" + sensor['id'] + "-" + logicalSensorName

    haConfigTopic = haTopicPrefix + "/" + uniqueID + "/config"

    configPayload = {
        "unique_id": uniqueID,
        "name": sensor["name"] + " " + logicalSensorName,
        "state_topic": valuesTopicPrefix + "/" + sensor['id'],
        "availability_topic": availabilityTopic,
        "payload_available": deviceAvailableValue,
        "payload_not_available": deviceNotAvailableValue,
        "force_update": True,
        "value_template": "{{value_json['Analog']['" + logicalSensorName + "']}}",
        "device": device["haConfig"]
    }

    if (sensorClass):
        configPayload["device_class"] = sensorClass

    if (sensorUnit):
        configPayload["unit_of_measurement"] = sensorUnit
    
    publish(topic=haConfigTopic, payload=configPayload, retain=True)

def unpublishLogicalSensorHaConfig(sensor,logicalSensorName,sensorClass,sensorUnit):
    global device
    uniqueID = device["id"] + "-" + sensor['id'] + "-" + logicalSensorName
    haConfigTopic = haTopicPrefix + "/" + uniqueID + "/config"
    publish(topic=haConfigTopic, payload="")

def publishAvailability(availability):
    publish(topic=availabilityTopic,payload=deviceAvailableValue,retain=True)

def unpublishAvailability(availability):
    publish(topic=availabilityTopic,payload="",retain=True)

def publishSensorHaConfig(sensor):
    if (sensor["type"] == "DHT22"):
        publishLogicalSensorHaConfig(sensor=sensor, logicalSensorName="Temperature", sensorClass="temperature", sensorUnit="°C")
        publishLogicalSensorHaConfig(sensor=sensor, logicalSensorName="Humidity", sensorClass="humidity", sensorUnit="%")

def unpublishSensorHaConfig(sensor):
    if (sensor["type"] == "DHT22"):
        publishLogicalSensorHaConfig(sensor=sensor, logicalSensorName="Temperature", sensorClass="temperature", sensorUnit="°C")
        publishLogicalSensorHaConfig(sensor=sensor, logicalSensorName="Humidity", sensorClass="humidity", sensorUnit="%")

# Sensor values message
# {
#     "Time": "2022-11-18T18:01:56",
#     "Analog": {
#         "Temperature": 19.8,
#         "Humidity": 33.1
#     }
# }
def publishSensor(sensor):
    publishTime = datetime.now().isoformat(timespec="seconds")

    temperature = betterAverage(sensor["data"]["temperatureList"])
    humidity = betterAverage(sensor["data"]["humidityList"])

    payload = {
        "Time": publishTime,
        "Reads": sensor["data"]["reads"],
        "Analog": {
            "Temperature": round(temperature,1),
            "Humidity": round(humidity,1)
        }
    }
    valuesTopic = valuesTopicPrefix + "/" + sensor['id']

    publish(topic=valuesTopic,payload=payload)

# remove outliers and return average of remaining
def betterAverage(data):
    sortedData = sorted(data)
    removeBottomPercent, removeTopPercent = (25, 75)
    originalLen = len(sortedData)
    bottomIndex = math.ceil(originalLen*removeBottomPercent/100)
    topIndex = math.ceil(originalLen*removeTopPercent/100)

    if (topIndex > bottomIndex):
        outliersRemoved = sortedData[bottomIndex:topIndex]
    else:
        outliersRemoved = sortedData
    
    average = sum(outliersRemoved)/len(outliersRemoved)
    return average

def resetSensorData(sensor):
    debugPrint("resetSensorData")
    if (sensor["type"] == "DHT22"):
        sensor["data"] = {
            "reads": 0,
            "temperatureList": [],
            "humidityList": []
        }

def readSensor(sensor):
    debugPrint("readSensor")
    if (sensor["type"] == "DHT22"):
        if debug:
            humidity = 22.22
            temperature = 33.33
        else: 
            humidity, temperature = Adafruit_DHT.read_retry(Adafruit_DHT.DHT22, sensor["pin"])

        sensor["data"]["reads"] += 1
        if (humidity):
            sensor["data"]["humidityList"].append(humidity)
        if (temperature):
            sensor["data"]["temperatureList"].append(temperature)

connect()
debugPrint("after connect()")

# initialize sensor counters and data
currentTime = datetime.now().timestamp()
for sensor in sensors:
    sensor["lastPublishTime"] = currentTime
    sensor["lastReadTime"] = 0
    resetSensorData(sensor)

while (True):
    currentTime = datetime.now().timestamp()

    if mqtt["connected"]:
        for sensor in sensors:
            if (currentTime - sensor["lastReadTime"] >= sensor["readInterval"]):
                debugPrint("# Read Interval #")
                readSensor(sensor)

                sensor["lastReadTime"] = currentTime

            if (currentTime - sensor["lastPublishTime"] >= sensor["publishInterval"]):
                debugPrint("# Update Interval #")
                publishSensor(sensor)

                sensor["lastPublishTime"] = currentTime
                resetSensorData(sensor)

    time.sleep(1)
